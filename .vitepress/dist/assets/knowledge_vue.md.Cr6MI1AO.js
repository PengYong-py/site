import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.CzlNzQcO.js";const c=JSON.parse('{"title":"vue相关","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/vue.md","filePath":"knowledge/vue.md"}'),l={name:"knowledge/vue.md"},h=n(`<h1 id="vue相关" tabindex="-1">vue相关 <a class="header-anchor" href="#vue相关" aria-label="Permalink to &quot;vue相关&quot;">​</a></h1><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><p>Vue.js 提供了一系列的生命周期钩子（Lifecycle Hooks），让开发者可以在组件实例的不同阶段执行特定的代码。这些钩子函数覆盖了从组件创建到销毁的整个过程。</p><h3 id="vue-2-x-和-vue-3-x-的生命周期钩子" tabindex="-1">Vue 2.x 和 Vue 3.x 的生命周期钩子 <a class="header-anchor" href="#vue-2-x-和-vue-3-x-的生命周期钩子" aria-label="Permalink to &quot;Vue 2.x 和 Vue 3.x 的生命周期钩子&quot;">​</a></h3><h4 id="创建阶段" tabindex="-1">创建阶段 <a class="header-anchor" href="#创建阶段" aria-label="Permalink to &quot;创建阶段&quot;">​</a></h4><ol><li><p><strong><code>beforeCreate</code></strong></p><ul><li><strong>触发时机</strong>：实例刚创建之后，此时数据观测 (reactivity) 和事件机制尚未初始化。</li><li><strong>用途</strong>：可以在这里进行一些初始化工作，但无法访问 <code>data</code>、<code>computed</code>、<code>methods</code> 和 <code>watch</code> 等属性。</li></ul></li><li><p><strong><code>created</code></strong></p><ul><li><strong>触发时机</strong>：实例创建完成后，此时数据观测、属性和方法已完成初始化，但尚未挂载 DOM。</li><li><strong>用途</strong>：可以进行数据获取、设置事件监听器等操作，可以访问组件的所有属性和方法。</li></ul></li></ol><h4 id="挂载阶段" tabindex="-1">挂载阶段 <a class="header-anchor" href="#挂载阶段" aria-label="Permalink to &quot;挂载阶段&quot;">​</a></h4><ol start="3"><li><p><strong><code>beforeMount</code></strong></p><ul><li><strong>触发时机</strong>：在挂载开始之前被调用，相关的 <code>render</code> 函数首次被调用。</li><li><strong>用途</strong>：可以在这里进行最后的修改或调整，但此时 DOM 结构还未创建。</li></ul></li><li><p><strong><code>mounted</code></strong></p><ul><li><strong>触发时机</strong>：实例挂载到 DOM 上之后被调用。</li><li><strong>用途</strong>：可以在这里进行与 DOM 相关的操作，例如获取 DOM 节点或进行一些 DOM 操作。</li></ul></li></ol><h4 id="更新阶段" tabindex="-1">更新阶段 <a class="header-anchor" href="#更新阶段" aria-label="Permalink to &quot;更新阶段&quot;">​</a></h4><ol start="5"><li><p><strong><code>beforeUpdate</code></strong></p><ul><li><strong>触发时机</strong>：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li><li><strong>用途</strong>：可以在数据更新前进行一些操作，或者在不需要更新时阻止渲染。</li></ul></li><li><p><strong><code>updated</code></strong></p><ul><li><strong>触发时机</strong>：由于数据更改导致的虚拟 DOM 重新渲染和打补丁之后调用。</li><li><strong>用途</strong>：可以在更新 DOM 之后执行一些操作，避免频繁操作 DOM。</li></ul></li></ol><h4 id="销毁阶段" tabindex="-1">销毁阶段 <a class="header-anchor" href="#销毁阶段" aria-label="Permalink to &quot;销毁阶段&quot;">​</a></h4><ol start="7"><li><p><strong><code>beforeDestroy</code></strong></p><ul><li><strong>触发时机</strong>：实例销毁之前调用，此时实例仍然完全可用。</li><li><strong>用途</strong>：可以在这里进行一些清理工作，如清除定时器、取消事件监听等。</li></ul></li><li><p><strong><code>destroyed</code></strong></p><ul><li><strong>触发时机</strong>：实例销毁后调用。此时组件的所有指令、事件监听器等均已解除绑定，所有子实例也已被销毁。</li><li><strong>用途</strong>：进行一些最后的清理工作，释放资源。</li></ul></li></ol><h3 id="vue-3-x-特有的生命周期钩子" tabindex="-1">Vue 3.x 特有的生命周期钩子 <a class="header-anchor" href="#vue-3-x-特有的生命周期钩子" aria-label="Permalink to &quot;Vue 3.x 特有的生命周期钩子&quot;">​</a></h3><h4 id="组件更新阶段" tabindex="-1">组件更新阶段 <a class="header-anchor" href="#组件更新阶段" aria-label="Permalink to &quot;组件更新阶段&quot;">​</a></h4><ol start="9"><li><p><strong><code>beforeUnmount</code></strong></p><ul><li><strong>触发时机</strong>：组件实例销毁之前调用，此时组件实例仍然完全可用，类似于 Vue 2.x 的 <code>beforeDestroy</code>。</li><li><strong>用途</strong>：进行一些清理工作，如清除定时器、取消事件监听等。</li></ul></li><li><p><strong><code>unmounted</code></strong></p><ul><li><strong>触发时机</strong>：组件实例销毁后调用。此时组件的所有指令、事件监听器等均已解除绑定，所有子实例也已被销毁，类似于 Vue 2.x 的 <code>destroyed</code>。</li><li><strong>用途</strong>：进行一些最后的清理工作，释放资源。</li></ul></li></ol><h3 id="vue-3-x-组合-api-中的生命周期钩子" tabindex="-1">Vue 3.x 组合 API 中的生命周期钩子 <a class="header-anchor" href="#vue-3-x-组合-api-中的生命周期钩子" aria-label="Permalink to &quot;Vue 3.x 组合 API 中的生命周期钩子&quot;">​</a></h3><p>在 Vue 3.x 中，可以使用组合 API 提供的生命周期钩子来替代选项 API 中的钩子函数。组合 API 中的钩子函数通常是在 <code>setup</code> 函数中使用。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { onBeforeMount, onMounted, onBeforeUpdate, onUpdated, onBeforeUnmount, onUnmounted } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onBeforeMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeMount&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mounted&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onBeforeUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeUpdate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onUpdated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;updated&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onBeforeUnmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeUnmount&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onUnmounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;unmounted&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>这些生命周期钩子在开发过程中非常有用，可以帮助我们在组件的不同阶段执行特定的逻辑，从而实现更灵活和可控的应用开发。</p><h2 id="mixins的优先级" tabindex="-1">mixins的优先级 <a class="header-anchor" href="#mixins的优先级" aria-label="Permalink to &quot;mixins的优先级&quot;">​</a></h2><ul><li><strong>数据</strong>：递归合并，组件数据优先。</li><li><strong>生命周期钩子</strong>：合并为数组，按顺序依次调用，先 mixin 后组件。</li><li><strong>方法和计算属性</strong>：组件优先，覆盖 mixin。</li><li><strong>Watchers</strong>：合并为数组，按顺序依次调用，先 mixin 后组件。</li><li><strong>自定义选项</strong>：可以定义自定义合并策略，否则默认覆盖。</li></ul><h2 id="完整的导航解析流程" tabindex="-1">完整的导航解析流程 <a class="header-anchor" href="#完整的导航解析流程" aria-label="Permalink to &quot;完整的导航解析流程&quot;">​</a></h2><ul><li>导航被触发。</li><li>在失活的组件里调用 beforeRouteLeave 守卫。</li><li>调用全局的 beforeEach 守卫。</li><li>在重用的组件里调用 beforeRouteUpdate 守卫(2.2+)。</li><li>在路由配置里调用 beforeEnter。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 beforeRouteEnter。</li><li>调用全局的 beforeResolve 守卫(2.5+)。</li><li>导航被确认。</li><li>调用全局的 afterEach 钩子。</li><li>触发 DOM 更新。</li><li>调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ul><h2 id="virtual-dom-算法简述" tabindex="-1">Virtual Dom 算法简述 <a class="header-anchor" href="#virtual-dom-算法简述" aria-label="Permalink to &quot;Virtual Dom 算法简述&quot;">​</a></h2><ul><li>首先从上至下，从左往右遍历对象，也就是树的深度遍历，这一步中会给每个节点添加索引，便于最后渲染差异</li><li>一旦节点有子元素，就去判断子元素是否有不同</li></ul><h2 id="virtual-dom-算法实现" tabindex="-1">Virtual Dom 算法实现 <a class="header-anchor" href="#virtual-dom-算法实现" aria-label="Permalink to &quot;Virtual Dom 算法实现&quot;">​</a></h2><h3 id="树的递归" tabindex="-1">树的递归 <a class="header-anchor" href="#树的递归" aria-label="Permalink to &quot;树的递归&quot;">​</a></h3><ol><li>新的节点的 tagName 或者 key 和旧的不同，这种情况代表需要替换旧的节点，并且也不再需要遍历新旧节点的子元素了，因为整个旧节点都被删掉了</li><li>新的节点的 tagName 和 key（可能都没有）和旧的相同，开始遍历子树</li><li>没有新的节点，那么什么都不用做</li></ol><h3 id="判断属性的更改" tabindex="-1">判断属性的更改 <a class="header-anchor" href="#判断属性的更改" aria-label="Permalink to &quot;判断属性的更改&quot;">​</a></h3><ol><li>遍历旧的属性列表，查看每个属性是否还存在于新的属性列表中</li><li>遍历新的属性列表，判断两个列表中都存在的属性的值是否有变化</li><li>在第二步中同时查看是否有属性不存在与旧的属性列列表中</li></ol><h3 id="判断列表差异算法实现" tabindex="-1">判断列表差异算法实现 <a class="header-anchor" href="#判断列表差异算法实现" aria-label="Permalink to &quot;判断列表差异算法实现&quot;">​</a></h3><ol><li>遍历旧的节点列表，查看每个节点是否还存在于新的节点列表中</li><li>遍历新的节点列表，判断是否有新的节点</li><li>在第二步中同时判断节点是否有移动</li></ol><h3 id="遍历子元素打标识" tabindex="-1">遍历子元素打标识 <a class="header-anchor" href="#遍历子元素打标识" aria-label="Permalink to &quot;遍历子元素打标识&quot;">​</a></h3><ol><li>判断两个列表差异</li><li>给节点打上标记</li></ol><h3 id="渲染差异" tabindex="-1">渲染差异 <a class="header-anchor" href="#渲染差异" aria-label="Permalink to &quot;渲染差异&quot;">​</a></h3><ol><li>深度遍历树，将需要做变更操作的取出来</li><li>局部更新 DOM</li></ol><h2 id="vue-的双向数据绑定实现原理" tabindex="-1">Vue 的双向数据绑定实现原理 <a class="header-anchor" href="#vue-的双向数据绑定实现原理" aria-label="Permalink to &quot;Vue 的双向数据绑定实现原理&quot;">​</a></h2><ul><li>数据劫持：使用 Object.defineProperty 劫持对象属性的 get 和 set。</li><li>依赖收集：在属性 get 时，收集当前的 Watcher 实例作为依赖。</li><li>Watcher 实例：创建 Watcher 实例来订阅属性变化，并在属性变化时执行回调。</li><li>事件通知：在属性 set 时，通知所有依赖于该属性的 Watcher 实例更新。</li></ul><h2 id="如何在-vue-中进行组件间的通信-并列举几种常见的方法" tabindex="-1">如何在 Vue 中进行组件间的通信，并列举几种常见的方法 <a class="header-anchor" href="#如何在-vue-中进行组件间的通信-并列举几种常见的方法" aria-label="Permalink to &quot;如何在 Vue 中进行组件间的通信，并列举几种常见的方法&quot;">​</a></h2><ul><li>父子组件通信： 使用 props 和 emit。</li><li>非父子组件通信： 使用全局事件总线、Vuex、provide/inject 等。</li></ul><h2 id="如何优化-vue-应用的性能-请列举几种方法" tabindex="-1">如何优化 Vue 应用的性能？请列举几种方法 <a class="header-anchor" href="#如何优化-vue-应用的性能-请列举几种方法" aria-label="Permalink to &quot;如何优化 Vue 应用的性能？请列举几种方法&quot;">​</a></h2><ol><li>懒加载组件</li><li>使用 v-once：对于静态内容使用 v-once 指令，使其只渲染一次。</li><li>使用 v-for 时加 key：在使用 v-for 渲染列表时，确保提供唯一的 key。</li><li>减少 watch 数量：避免过多的 watch，尽量使用计算属性（computed properties）。</li><li>适当的分片更新：使用 requestAnimationFrame 或 setTimeout 分片更新数据，避免长时间的阻塞。</li><li>事件代理：对于大量的事件监听，可以使用事件代理来减少内存占用。</li></ol><p><code>nextTick</code> 是 Vue.js 提供的一个方法，用于在下次 DOM 更新循环结束之后执行延迟回调。在了解 <code>nextTick</code> 的原理之前，我们需要了解 JavaScript 的事件循环机制（Event Loop）以及 Vue 的响应式更新机制。</p><h3 id="事件循环和微任务" tabindex="-1">事件循环和微任务 <a class="header-anchor" href="#事件循环和微任务" aria-label="Permalink to &quot;事件循环和微任务&quot;">​</a></h3><p>JavaScript 运行环境分为同步任务和异步任务，同步任务在主线程上执行，异步任务在任务队列中等待。异步任务又分为宏任务（macrotask）和微任务（microtask）。</p><ul><li><strong>宏任务</strong>：如 <code>setTimeout</code>、<code>setInterval</code>、I/O 操作等。</li><li><strong>微任务</strong>：如 <code>Promise.then</code>、<code>MutationObserver</code> 等。</li></ul><p>事件循环的一个周期可以概括为：</p><ol><li>执行一个宏任务（如果有的话）。</li><li>执行所有的微任务。</li><li>更新渲染。</li><li>重复以上步骤。</li></ol><h3 id="vue-的响应式更新机制" tabindex="-1">Vue 的响应式更新机制 <a class="header-anchor" href="#vue-的响应式更新机制" aria-label="Permalink to &quot;Vue 的响应式更新机制&quot;">​</a></h3><p>Vue 的响应式系统会收集依赖，当数据变化时，会触发依赖通知（即 Watcher），然后将这些 Watcher 推入一个队列（这个队列是一个微任务队列）。为了提高性能，Vue 会对这些更新进行批处理（在同一个事件循环中合并相同的更新）。</p><h2 id="nexttick-的实现原理" tabindex="-1"><code>nextTick</code> 的实现原理 <a class="header-anchor" href="#nexttick-的实现原理" aria-label="Permalink to &quot;\`nextTick\` 的实现原理&quot;">​</a></h2><p>Vue 的 <code>nextTick</code> 方法就是基于微任务实现的，它的主要作用是在 DOM 更新完成之后执行一个回调函数。其内部实现如下：</p><ol><li><strong>定义回调队列</strong>：存储需要在下次 DOM 更新后执行的回调函数。</li><li><strong>定义一个标志位</strong>：标志是否已经向微任务队列添加了一个任务。</li><li><strong>创建微任务</strong>：根据环境选择合适的微任务实现方式。</li></ol><p>以下是一个简化版的 <code>nextTick</code> 实现：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> callbacks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pending </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flushCallbacks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pending </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> copies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> callbacks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  callbacks.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  copies.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> microTimerFunc;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;undefined&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  microTimerFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flushCallbacks);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MutationObserver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;undefined&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MutationObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flushCallbacks);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> textNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createTextNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(counter));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(textNode, { characterData: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  microTimerFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    textNode.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(counter);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> setImmediate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;undefined&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  microTimerFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flushCallbacks);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  microTimerFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flushCallbacks, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _resolve;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  callbacks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cb) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_resolve) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      _resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pending) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pending </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    microTimerFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 如果没有提供回调且Promise可用，返回一个Promise</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;undefined&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      _resolve </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resolve;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="nexttick-的工作流程" tabindex="-1"><code>nextTick</code> 的工作流程 <a class="header-anchor" href="#nexttick-的工作流程" aria-label="Permalink to &quot;\`nextTick\` 的工作流程&quot;">​</a></h3><ol><li><strong>将回调函数推入队列</strong>：无论是用户传入的回调函数，还是内部更新 DOM 之后需要执行的操作，都会被推入 <code>callbacks</code> 队列。</li><li><strong>标志位</strong>：检查 <code>pending</code> 标志，如果是 <code>false</code>，说明没有任务在等待执行，此时设置 <code>pending</code> 为 <code>true</code> 并调用 <code>microTimerFunc</code> 创建一个微任务。</li><li><strong>执行微任务</strong>：在微任务队列中调用 <code>flushCallbacks</code> 方法，该方法会依次执行 <code>callbacks</code> 队列中的所有回调函数，并清空队列。</li></ol><h3 id="使用-nexttick-的场景" tabindex="-1">使用 <code>nextTick</code> 的场景 <a class="header-anchor" href="#使用-nexttick-的场景" aria-label="Permalink to &quot;使用 \`nextTick\` 的场景&quot;">​</a></h3><p><code>nextTick</code> 的常见使用场景包括：</p><ul><li>在数据更新之后立即获取更新后的 DOM 状态。</li><li>在数据变化后执行依赖 DOM 更新的逻辑。</li></ul><p>例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello, World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // DOM 更新完成后执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$refs.message.innerText); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;Hello, World!&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>总结来说，Vue 的 <code>nextTick</code> 方法基于 JavaScript 的微任务机制，确保在 DOM 更新完成之后执行回调函数，从而保证了数据与视图的同步性和一致性。</p>`,63),t=[h];function e(k,p,r,E,d,o){return a(),i("div",null,t)}const y=s(l,[["render",e]]);export{c as __pageData,y as default};
